plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.all_i'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

var querydslDir = file("build/generated/querydsl")

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Querydsl dependencies
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Spring REST Docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	//s3
	implementation("software.amazon.awssdk.crt:aws-crt:0.33.2")
	implementation("io.awspring.cloud:spring-cloud-aws-starter-s3:3.1.1")
	implementation("software.amazon.awssdk:s3:2.29.18")

	// WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	//firebase
	implementation 'com.google.firebase:firebase-admin:6.8.1'
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.2.2'

	//kafka
	implementation 'org.springframework.kafka:spring-kafka:3.0.10'
	implementation 'org.apache.kafka:kafka-clients:3.9.0'

	testImplementation "org.testcontainers:testcontainers:1.19.3"
	testImplementation "org.testcontainers:junit-jupiter:1.19.3"
	testImplementation "org.testcontainers:mysql:1.19.3"

//	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'org.hibernate.orm:hibernate-spatial:6.2.9.Final'
	implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'
}

ext {
	snippetsDir = file('build/generated-snippets')
}

asciidoctor {
	inputs.dir snippetsDir
	baseDirFollowsSourceFile()
	configurations 'asciidoctorExt'
	dependsOn test
}

tasks.named('test') {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

tasks.named('compileJava') {
	doLast {
		println("Querydsl QClasses will be generated in: ${file('build/generated/querydsl')}")
	}
}

tasks.compileJava {
	options.annotationProcessorGeneratedSourcesDirectory = querydslDir
}

sourceSets {
	main {
		java {
			srcDir querydslDir
		}
	}
}
